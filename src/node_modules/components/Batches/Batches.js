import React from 'react';
import cx from 'classnames';
import PropTypes from 'prop-types';
import {QueryListView} from 'modules/QueryController';
import {QueryComponent} from 'modules/Flux';
import {DialogFactory} from 'modules/Form';
import Title from 'components/Title';
import Date from 'components/Date';
import {Price} from 'components/Currency';
import Admin from 'flux/Admin';
import BatchView from 'dialogs/BatchView';
import localizeDelivery, {
  kDeliveryProviderBoxberry,
  kDeliveryProviderRussiaPost,
} from 'services/localizedDelivery';
import { isFunction } from 'underscore';
import './Batches.css';
import 'react-tippy/dist/tippy.css';
import * as keys from './constants';
import {noun} from 'plural-ru';

const kDialogKey = 'dialog';

export default class Batches extends QueryComponent {
  getInitialStore() {
    return [Admin];
  }

  async didChangeStoreState() {
    const {query} = this.state;
    await query.fetchCurrentPage();
  }

  handleRowClick = (row) => {
    const { onRowClick } = this.props;
    if (isFunction(onRowClick)) return onRowClick(row);

    const {dialogs} = this.state;

    dialogs.showDialog(kDialogKey, {
      header: `Партия №${row[keys.kIDKey]}`,
      showHeader: true,
      size: 'large',
      Component: <BatchView submitCancel value={row}/>,
    });
  };

  tableCellForRowAt = (cell, batch) => {
    switch (cell) {
      case keys.kBatchCell:
        return (
            <div className="Batches__item Batches__item--oneRow">
              <div>{batch[keys.kIDKey]}</div>
              <div>{noun(batch[keys.kOrdersKey].length, '%d отправление', '%d отправления', '%d отправлений')}</div>
              {/*<div>*/}
                {/*{localizeDelivery({*/}
                  {/*provider: batch[keys.kProviderCell],*/}
                {/*})}*/}
              {/*</div>*/}
              <strong>
                <Date format="DD-MM-YYYY" value={batch[keys.kCreatedAtKey]}/>
              </strong>
            </div>);
      case keys.kProviderCell:
        return (
            <div className="Batches__item">
              {localizeDelivery({
                provider: batch[keys.kProviderCell],
              })}
            </div>);
      case keys.kTotalCell:
        return (
            <div className="Batches__item">
              <Price value={batch[keys.kTotalKey]}/>
            </div>);
      case keys.kIDCell:
        return (
            <div className="Batches__item text-center">
              {batch[keys.kIDKey]}
            </div>);
      default :
        return <div>--</div>;
    }
  };

  handleSelect = (row, rowIndex, checked, selected) => {
    const {onSelected, onSelect} = this.props;
    const {query} = this.state;

    onSelected(selected.map(id => query.find(i => i.id === id)));
    onSelect(row, rowIndex, checked, selected);
  };

  handleSelectAll = (selected, checked) => {
    const {onSelectAll, onSelected} = this.props;
    const {query} = this.state;

    onSelected(selected.map(id => query.find(i => i.id === id)));
    onSelectAll(selected, checked);
  };

  tableCellStyle(row) {
    if (row[keys.kProviderCell] === kDeliveryProviderBoxberry) {
      return {
        backgroundColor: '#fff0f0',
      };
    }

    if (row[keys.kProviderCell] === kDeliveryProviderRussiaPost) {
      return {
        backgroundColor: 'azure',
      };
    }

    return {};
  }

  render() {
    const {query, dialogs} = this.state;
    const {title, className, allowSelect, selected} = this.props;

    return (
        <div className={cx('Batches', className)}>
          {
            title &&
            <Title onClick={this.reloadData}>{title}</Title>
          }
          <QueryListView query={query}
                         allowSelect={allowSelect}
                         keyField={'id'}
                         classNameContainer="Batches__table_wrapper"
                         selected={selected.map(i => i.id)}
                         onSelect={this.handleSelect}
                         onSelectAll={this.handleSelectAll}
                         className="Batches__table"
                         headerStyle={{
                           color: '#000',
                           fontWeight: 400,
                           fontSize: 14,
                         }}
                         headers={keys.headers}
                         onRowClick={this.handleRowClick}
                         styleCell={this.tableCellStyle}
                         emptyView={() => 'Нет данных'}
                         renderCell={this.tableCellForRowAt}
          />
          <DialogFactory dialogKey={kDialogKey} dialogs={dialogs}/>
        </div>
    );
  }
}

Batches.propTypes = {
  page: PropTypes.number,
  onSelect: PropTypes.func,
  onSelectAll: PropTypes.func,
  onSelected: PropTypes.func,
  onRowClick: PropTypes.func,
  selected: PropTypes.array,
  title: PropTypes.string,
  allowSelect: PropTypes.bool,
  className: PropTypes.string,
  objectsPerPage: PropTypes.number,
};
Batches.defaultProps = {
  page: 0,
  onSelect: () => {
  },
  onSelectAll: () => {
  },
  onSelected: () => {
  },
  onRowClick: null,
  selected: [],
  title: '',
  allowSelect: false,
  objectsPerPage: 25,
};