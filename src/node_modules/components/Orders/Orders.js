import React from 'react';
import cx from 'classnames';
import PropTypes from 'prop-types';
import {QueryListView} from 'modules/QueryController';
import {QueryComponent} from 'modules/Flux';
import {DialogFactory} from 'modules/Form';
import Date from 'components/Date';
import Title from 'components/Title';
import Phone from 'components/Phone';
import Email from 'components/Email';
import Owner from 'components/OwnerName';
import Invoice from 'components/Invoice';
import {Price} from 'components/Currency';
import Shipping from 'components/Shipping';
import Status from 'components/OrderStatus';
import Address, {parse} from 'components/Address';
import Actions from 'flux/AdminActions';
import Admin from 'flux/Admin';
import OrderEdit from 'dialogs/OrderEdit';
import { isFunction } from 'underscore';
import './Orders.css';
import * as keys from './constants';
import {kOrderStatusDeclined} from 'services/localizedOrderStatus';
import {
  kDeliveryProviderBoxberry,
  kDeliveryProviderRussiaPost,
} from 'services/localizedDelivery';

const kDialogKey = 'dialog';

export default class Orders extends QueryComponent {
  getInitialStore() {
    return [Admin];
  }

  async didChangeStoreState() {
    const {query} = this.state;
    await query.fetchCurrentPage();
  }

  handleRowClick = (row) => {
    const { onRowClick } = this.props;
    if (isFunction(onRowClick)) return onRowClick(row);

    const {dialogs} = this.state;

    dialogs.showDialog(kDialogKey, {
      header: `Order №${row[keys.kInvoiceKey]}`,
      showHeader: true,
      size: 'large',
      Component: <OrderEdit submitCancel
                            value={row}
                            disabled={row[keys.kStatusKey] ===
                            kOrderStatusDeclined}
                            onSubmit={async (attrs) => {
                              await Actions.updateOrder(row, attrs);
                            }}/>,
    });
  };

  tableCellForRowAt = (cell, order) => {
    const address = parse(order[keys.kAddressKey]);

    switch (cell) {
      case keys.kDateAndInvoiceCell:
        return (
            <div className="Orders__item">
              <Invoice value={order[keys.kInvoiceKey]}/>
              <Date value={order[keys.kCreatedAtKey]}/>
              <Owner name={address.name} />
            </div>);
      case keys.kStatusCell:
        return (
            <div className="Orders__item">
              <Status value={order[keys.kStatusKey]}/>
            </div>);
      case keys.kCreatedAtCell:
        return (
            <div className="Orders__item">
              <Date value={order[keys.kCreatedAtKey]}/>
            </div>
        );
      case keys.kContactsCell:
        return (
            <div className="Orders__item">
              <Email email={address.email}/><br/>
              <Phone tel={address.phone}/>
            </div>
        );
      case keys.kInvoiceCell:
        return (
            <div className="Orders__item">
              <Invoice value={order[keys.kInvoiceKey]}/>
            </div>
        );
      case keys.kDeliveryCell:
        return (
            <div className="Orders__item">
              <Shipping {...order[keys.kDeliveryKey]}/>
            </div>
        );
      case keys.kAddressCell:
        return (
            <div className="Orders__item">
              <Address {...address}/>
            </div>);
      case keys.kTotalCell:
        return (
            <div className="Orders__item">
              <Price value={order[keys.kTotalKey]}
                     className="Orders__currency_price"/>
            </div>
        );
      default :
        return <div>--</div>;
    }
  };

  tableCellStyle(row) {
    if (row[keys.kDeliveryKey][keys.kDeliveryProviderKey] ===
        kDeliveryProviderBoxberry) {
      return {
        backgroundColor: '#fff0f0',
      };
    }

    if (row[keys.kDeliveryKey][keys.kDeliveryProviderKey] ===
        kDeliveryProviderRussiaPost) {
      return {
        backgroundColor: 'azure',
      };
    }

    return {};
  }

  handleSelect = (row, rowIndex, checked, selected) => {
    const {onSelected, onSelect} = this.props;
    const {query} = this.state;

    onSelected(selected.map(id => query.find(i => i.id === id)));
    onSelect(row, rowIndex, checked, selected);
  };

  handleSelectAll = (selected, checked) => {
    const {onSelectAll, onSelected} = this.props;
    const {query} = this.state;

    onSelected(selected.map(id => query.find(i => i.id === id)));
    onSelectAll(selected, checked);
  };

  render() {
    const {query, dialogs} = this.state;
    const {title, className, allowSelect, selected} = this.props;

    return (
        <div className={cx('Orders', className)}>
          {
            title &&
            <Title onClick={this.reloadData}>{title}</Title>
          }
          <QueryListView query={query}
                         allowSelect={allowSelect}
                         selected={selected.map(i => i.id)}
                         onSelect={this.handleSelect}
                         onSelectAll={this.handleSelectAll}
                         keyField={'id'}
                         classNameContainer="Orders__table_wrapper"
                         className="Orders__table"
                         headerStyle={{
                           color: '#000',
                           fontWeight: 400,
                           fontSize: 14,
                         }}
                         headers={keys.headers}
                         onRowClick={this.handleRowClick}
                         emptyView={() => 'Нет данных'}
                         styleCell={this.tableCellStyle}
                         renderCell={this.tableCellForRowAt}
          />
          <DialogFactory dialogKey={kDialogKey} dialogs={dialogs}/>
        </div>
    );
  }
}

Orders.propTypes = {
  page: PropTypes.number,
  onSelect: PropTypes.func,
  onSelectAll: PropTypes.func,
  onSelected: PropTypes.func,
  onRowClick: PropTypes.func,
  selected: PropTypes.array,
  title: PropTypes.string,
  allowSelect: PropTypes.bool,
  className: PropTypes.string,
  objectsPerPage: PropTypes.number,
};
Orders.defaultProps = {
  page: 0,
  onSelect: () => {
  },
  onSelectAll: () => {
  },
  onSelected: () => {
  },
  onRowClick: null,
  selected: [],
  title: 'Заказы',
  allowSelect: false,
  objectsPerPage: 25,
};
