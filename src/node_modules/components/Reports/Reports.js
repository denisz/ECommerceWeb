import React from 'react';
import cx from 'classnames';
import {isFunction} from 'underscore';
import PropTypes from 'prop-types';
import {QueryListView} from 'modules/QueryController';
import Date from 'components/Date';
import {QueryComponent} from 'modules/Flux';
import ReportView from 'dialogs/ReportView';
import Title from 'components/Title';
import {DialogFactory} from 'modules/Form';
import localizedReport from 'services/localizedReport';
import SourceReport from 'components/SourceReport';
import './Reports.css';
import * as keys from './constants';
import {kTypeKey} from '../../../routes/Admin/Accounting/Filter/constants';

const kDialogKey = 'dialog';

export default class Reports extends QueryComponent {
  handleRowClick = (row) => {
    const { onRowClick } = this.props;
    if (isFunction(onRowClick)) return onRowClick(row);

    const {dialogs} = this.state;

    dialogs.showDialog(kDialogKey, {
      header: `Отчет №${row[keys.kIdKey]}`,
      showHeader: true,
      size: 'large',
      Component: <ReportView submitCancel value={row}/>,
    });
  };

  tableCellForRowAt = (cell, report) => {
    switch (cell) {
      case keys.kTypeCell:
        return (
            <div className="Reports__item">
              {localizedReport(report[kTypeKey])}
            </div>);

      case keys.kCreatedAtCell:
        return (
            <div className="Reports__item">
              <Date format="DD-MM-YYYY" value={report[keys.kCreatedAtKey]}/>
            </div>);
      case keys.kSourceCell:
        return (
            <div className="Reports__item">
              <SourceReport source={report[keys.kSourceKey]} sourceId={report[keys.kSourceIdKey]}/>
            </div>);
      default :
        return <div>--</div>;
    }
  };

  handleSelect = (row, rowIndex, checked, selected) => {
    const {onSelected, onSelect} = this.props;
    const {query} = this.state;

    onSelected(selected.map(id => query.find(i => i.id === id)));
    onSelect(row, rowIndex, checked, selected);
  };

  handleSelectAll = (selected, checked) => {
    const {onSelectAll, onSelected} = this.props;
    const {query} = this.state;

    onSelected(selected.map(id => query.find(i => i.id === id)));
    onSelectAll(selected, checked);
  };

  render() {
    const {query, dialogs} = this.state;
    const {title, className, allowSelect, selected} = this.props;

    return (
      <div className={cx('Reports', className)}>
        {
          title &&
          <Title onClick={this.reloadData}>{title}</Title>
        }
        <QueryListView query={query}
                       allowSelect={allowSelect}
                       selected={selected.map(i => i.id)}
                       onSelect={this.handleSelect}
                       onSelectAll={this.handleSelectAll}
                       keyField={'id'}
                       classNameContainer="Reports__table_wrapper"
                       className="Reports__table"
                       headerStyle={{
                         color: '#000',
                         fontWeight: 400,
                         fontSize: 14,
                       }}
                       headers={keys.headers}
                       onRowClick={this.handleRowClick}
                       emptyView={() => 'Нет данных'}
                       renderCell={this.tableCellForRowAt}
        />
        <DialogFactory dialogKey={kDialogKey} dialogs={dialogs}/>
      </div>
    );
  }
}

Reports.propTypes = {
  page: PropTypes.number,
  title: PropTypes.string,
  onSelect: PropTypes.func,
  onSelectAll: PropTypes.func,
  onSelected: PropTypes.func,
  onRowClick: PropTypes.func,
  allowSelect: PropTypes.bool,
  className: PropTypes.string,
  objectsPerPage: PropTypes.number,
};
Reports.defaultProps = {
  page: 0,
  onSelect: () => {
  },
  onSelectAll: () => {
  },
  onSelected: () => {
  },
  onRowClick: null,
  selected: [],
  title: 'Отчеты',
  allowSelect: false,
  objectsPerPage: 25,
};
