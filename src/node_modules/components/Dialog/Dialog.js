import React, {Component} from 'react';
import cx from 'classnames';
import {noop} from 'underscore';
import PropTypes from 'prop-types';
import {Modal} from 'react-overlays';
import Scale from './Scale';
import './Dialog.css';

const sizes = ['', 'lg', 'large', 'sm', 'small'];
const backdrops = ['static', true, false];

export default class Dialog extends Component {
  getChildContext() {
    return {
      hideDialog: this.props.onHide,
    };
  }

  onEnter = () => {

  };

  onEntered = () => {

  };

  onExit = () => {

  };

  render() {
    const {show, onHide, backdrop, closeButton, header, showHeader} = this.props;
    const {dialogClassName, headerClassName} = this.props;
    const props = {show, onHide, backdrop};

    return (
        <Modal
            aria-labelledby='modal-label'
            backdropClassName="Modal__backdrop fade show"
            containerClassName="Modal"
            onBackdropClick={this.props.onHide}
            onEnter={this.onEnter}
            onEntered={this.onEntered}
            onExit={this.onExit}
            {...props}
        >
          <Scale in={show}
                 timeout={300}
                 mountOnEnter={false}
                 unmountOnExit={false}
                 appear={show}>
            <div className={cx('Modal__container', {
              'Modal__container--small': this.props.size === 'small',
              'Modal__container--large': this.props.size === 'large',
              'Modal__container--lg': this.props.size === 'lg',
              'Modal__container--sm': this.props.size === 'sm',
            })}>
              {
                showHeader &&
                <div className={cx('Modal__header', headerClassName)}
                    id='modal-label'>
                  {header}

                  {closeButton &&
                  <div className='Modal__close_button'
                       onClick={this.props.onHide}>x</div>}
                </div>
              }
              <div className={cx('Modal__body', dialogClassName)}>
                {this.props.children}
              </div>
            </div>
          </Scale>
        </Modal>
    );
  }
}

Dialog.propTypes = {
  header: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
  onHide: PropTypes.func,
  show: PropTypes.bool,
  closeButton: PropTypes.bool,
  showHeader: PropTypes.bool,
  headerClassName: PropTypes.string,
  size: PropTypes.oneOf(sizes),
  backdrop: PropTypes.oneOf(backdrops),
};
Dialog.defaultProps = {
  size: '',
  header: '',
  show: false,
  onHide: noop,
  backdrop: 'static',
  showHeader: false,
  closeButton: true,
};
Dialog.childContextTypes = {
  hideDialog: PropTypes.func,
};
