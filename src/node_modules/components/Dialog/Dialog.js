import React, { Component } from 'react';
import cx from 'classnames';
import { noop } from 'underscore';
import PropTypes from 'prop-types';
import { Modal } from 'react-overlays';
import './Dialog.css';

const sizes = ['', 'lg', 'large', 'sm', 'small'];
const backdrops = ['static', true, false];

export default class Dialog extends Component {
  getChildContext() {
    return {
      hideDialog: this.props.onHide,
    };
  }

  render() {
    const { show, onHide, backdrop, closeButton, header, showHeader } = this.props;
    const { dialogClassName, headerClassName } = this.props;
    const props = { show, dialogClassName, onHide, backdrop };

    if (this.props.size) {
      props.bsSize = this.props.size;
    }

    if (this.props.size === 'large') {
      props.className = 'modal-large';
    }

    return (
      <Modal {...props}>
        {
          showHeader &&
          <Modal.Header
            closeButton={closeButton}
            bsClass={cx('modal-header', 'Header', headerClassName)}
          >
            <Modal.Title>{header}</Modal.Title>
          </Modal.Header>
        }
        <Modal.Body>
          {this.props.children}
        </Modal.Body>
      </Modal>
    );
  }
}

Dialog.propTypes = {
  header: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),
  onHide: PropTypes.func,
  show: PropTypes.bool,
  closeButton: PropTypes.bool,
  showHeader: PropTypes.bool,
  headerClassName: PropTypes.string,
  dialogClassName: PropTypes.string,
  size: PropTypes.oneOf(sizes),
  backdrop: PropTypes.oneOf(backdrops),
};
Dialog.defaultProps = {
  size: '',
  header: '',
  show: false,
  onHide: noop,
  backdrop: 'static',
  showHeader: false,
  closeButton: true,
};
Dialog.childContextTypes = {
  hideDialog: PropTypes.func,
};
