import React, { Component } from 'react';
import PropTypes from 'prop-types';

export default class AsyncComponent extends Component {
  constructor(props) {
      super(props);
      this.state = {
        externalData: null,
      };
  }

  componentWillReceiveProps(nextProps) {

  }

  async componentDidMount() {
    this.unmount = false;
    await this.resolve();
  }

  safeSetState(...attrs) {
    if (this.unmount) return;
    this.setState(...attrs);
  }

  async resolve () {
    const { resolve, error, loading, ...rest } = this.props;
    this.safeSetState({externalData: loading() });

    try {
      const result = await resolve();
      const component = result(rest);
      this.safeSetState({ externalData: component });
    } catch(e) {
      this.safeSetState({ externalData: error(e) });
    }
  }

  componentWillUnmount() {
    this.unmount = true;
  }

  render() {
    const { externalData } = this.state;
    if ( externalData ) return externalData;
    return <div />
  }
}

AsyncComponent.propTypes = {
  resolve: PropTypes.func,
  error: PropTypes.any,
  loading: PropTypes.any,
};

AsyncComponent.defaultProps = {
  resolve: ()=>{},
  error: ()=>{},
  loading: ()=>{},
};