import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { uniqueId } from 'underscore';
import cx from 'classnames';
import './ChoiceList.css';


let choiceIsSelected = (choice, selected) => {
  if (Array.isArray(selected)) {
    return selected.indexOf(choice) !== -1
  }

  return choice === selected;
};

export default class ChoiceList extends PureComponent {
  handleChange = (e) => {
    const { onChange, allowMultiple, selected } = this.props;
    if (allowMultiple) {
      const value = e.target.value;
      const uniqueSelected = new Set([...selected]);

      if (uniqueSelected.has(value)) {
        uniqueSelected.delete(value)
      } else {
        uniqueSelected.add(value);
      }

      onChange([...uniqueSelected]);
    } else {
      onChange(e);
    }
  };

  render() {
    const { label, choices, allowMultiple, selected } = this.props;
    const name = uniqueId('choiceList');

    return (
      <div className="ChoiceList">
        <legend className="ChoiceList-title">{label}</legend>
        <ul className="list-unstyled">
          {
            choices.map((i, idx)=>(
              <li key={idx}>
                <label htmlFor={`${name}${idx}`} className={cx({
                  'polaris-check': allowMultiple,
                  'polaris-radio': !allowMultiple,
                })}>
                  <input
                    checked={choiceIsSelected(i.value, selected)}
                    onChange={this.handleChange}
                    value={i.value}
                    type={allowMultiple ? 'checkbox' : 'radio' }
                    name={name}
                    id={`${name}${idx}`} />
                    <span>{i.label}</span>
                  {
                    i.helpText &&
                    <small className={cx('ChoiceList-help', 'form-text', 'text-muted')}>{i.helpText}</small>
                  }
                </label>

              </li>))
          }
        </ul>
      </div>
    );
  }
}

ChoiceList.propTypes = {
  label: PropTypes.string,
  choices: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.string,
    value: PropTypes.any,
    helpText: PropTypes.string,
  })),
  allowMultiple: PropTypes.bool,
  selected: PropTypes.oneOfType(PropTypes.arrayOf(PropTypes.any), PropTypes.any),
  onChange: PropTypes.func,
};
ChoiceList.defaultProps = {
  label: '',
  choices: [],
  selected: null,
  allowMultiple: false,
  onChange: () => {},
};

