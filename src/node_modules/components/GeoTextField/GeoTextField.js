import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Suggest from 'react-autosuggest';
import Item from './Item';
import './GeoTextField.css';

// When suggestion is clicked, Autosuggest needs to populate the input
// based on the clicked suggestion. Teach Autosuggest how to calculate the
// input value for every given suggestion.
const getSuggestionValue = suggestion => suggestion.value;
const renderSuggestion = suggestion => (<Item {...suggestion} />);

export default class GeoTextField extends Component {
  constructor(props) {
    super(props);
    this.state = {
      suggestions: []
    };
  }

  onChange = (event, { newValue }) => {
    this.setState({
      value: newValue
    });
  };

  // Teach Autosuggest how to calculate suggestions for any given input value.
  static async getSuggestions(request) {
    if (!window.ymaps || request === '') return [];
    await window.ymaps.ready();
    return window.ymaps.suggest(request, {
      results: 5,
      provider: 'yandex#map',
    })
  }

  // Autosuggest will call this function every time you need to update suggestions.
  // You already implemented this logic above, so just use it.
  onSuggestionsFetchRequested = async ({ value }) => {
    const suggestions = await GeoTextField.getSuggestions(value);
    this.setState({ suggestions });
  };

  // Autosuggest will call this function every time you need to clear suggestions.
  onSuggestionsClearRequested = () => {
    this.setState({ suggestions: [] });
  };

  handleChange = (e, { newValue, method }) => {
    const { onChange } = this.props;
    onChange(newValue);
  };

  render() {
    const { suggestions } = this.state;
    const { value, label, className, placeholder } = this.props;

    return (
      <div className="GeoTextField">
        <Suggest
          suggestions={suggestions}
          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}
          onSuggestionsClearRequested={this.onSuggestionsClearRequested}
          getSuggestionValue={getSuggestionValue}
          renderSuggestion={renderSuggestion}
          renderInputComponent={ inputProps => (
            <div className="form-group">
              <label htmlFor="geo-text-field">{label}</label>
              <input type="text" {...inputProps} />
            </div>
          ) }
          inputProps={{
            placeholder,
            value,
            className,
            onChange: this.handleChange
          }}
        />
      </div>
    );
  }
}

GeoTextField.propTypes = {
  value: PropTypes.string,
  onChange: PropTypes.func,
};
GeoTextField.defaultProps = {
  value: '',
  onChange: () => {},
};
