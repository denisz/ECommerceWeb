import { map, every, reject, sortBy,
  isFunction, isObject, isString, isArray } from 'underscore';
import assert from 'assert';
import ValidationErrors from './ValidationErrors.js';

const ShowErrorsForm = (error, controls) => {
  assert(controls, 'Controls is not defined');

  assert(error, 'Error is not defined');
  assert(isObject(error), 'Error is not recognized as a Error');

  const validationErrors = error.errors;
  let controlsMarkedAsError = [];

  const showErrorControl = (path, err) => {
    const control = controls[path];

    if (isObject(control) && isFunction(control.setError)) {
      controlsMarkedAsError.push(control);
      controls[path].setError(err);
    }
  };

  const showErrorGroup = (root, valid) => {
    if (isObject(valid) || isArray(valid)) {
      map(valid, (item, index) => {
        const path = root ? `${root}.${index}` : index;

        switch (true) {
          case every(item, isObject):
            showErrorGroup(path, item);
            break;
          case every(item, isString):
            showErrorControl(path, item);
            break;
          default:
            showErrorGroup(path, reject(item, isString));
            showErrorControl(path, reject(item, isObject));
            break;
        }
      });
    }
  };

  showErrorGroup(null, validationErrors);
  if (controlsMarkedAsError.length > 0) {
    controlsMarkedAsError = sortBy(controlsMarkedAsError, i => i.tabIndex());
    const control = controlsMarkedAsError[0];
    if (isFunction(control.focus)) {
      control.focus();
    }
  }
};

const handlingSystemErrors = () => {

};


/* ################################################################################
#                              Exports                                           #
################################################################################*/
export const FormClearErrors = (controls) => {
  assert(controls, 'Controls is not defined');
  assert(every(controls, isObject), 'Controls is not recognized as a object array');

  Object.values(controls).forEach((control) => {
    if (isObject(control) && isFunction(control.clearError)) {
      control.clearError();
    }
  });
};

export const FormErrorHandler = (error, controls) => {
  assert(error, 'Error is not defined');
  assert(isObject(error), 'Error is not recognized as a Error');

  switch (true) {
    case error instanceof ValidationErrors:
      FormClearErrors(controls);
      ShowErrorsForm(error, controls);
      break;
    case error instanceof Error:
      handlingSystemErrors(error);
      break;
    default:
      console.error(error);
  }
};

export const WrapperFormErrorHandler = controls => (error) => {
  FormErrorHandler(error, controls);
  throw error;
};

export const WrapperClearErrors = controls => (result) => {
  FormClearErrors(controls);
  return result;
};

