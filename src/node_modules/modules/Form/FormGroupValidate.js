import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { delay, isFunction, isString } from 'underscore';
import cx from 'classnames';
import Scroll from 'react-scroll';

export default class FormGroupValidate extends Component {
  constructor(props) {
    super(props);

    this.state = {
      error: false,
      validationState: false,
    };
  }

  setError(error, validationState) {
    this.setState({
      error,
      validationState: validationState || 'error',
    });
  }

  setSuccess() {
    this.setState({
      error: false,
      validationState: 'success',
    });
  }

  clearError() {
    this.setState({
      error: false,
      validationState: '',
    });
  }

  scrollIntoViewIfNeeded() {
    const node = this.node;

    if (node) {
      const name = 'current_scroll';
      Scroll.scroller.register(name, node);

      Scroll.scroller.scrollTo(name, {
        duration: 700,
        delay: 100,
        offset: -100,
        smooth: true,
      });
    }
  }

  focus() {
    this.scrollIntoViewIfNeeded();

    delay(() => {
      const node = this.node;
      if (node && isFunction(node.querySelector)) {
        const element = node.querySelector('input,textarea,select,button');
        if (element) {
          element.focus();
        }
      }
    }, 600);
  }

  tabindex() {
    return this.props.tabindex;
  }

  render() {
    const validationState = this.state.validationState;

    const className = cx({
      'has-error': validationState === 'error',
      'has-warning': validationState === 'warning',
      'has-success': validationState === 'success',
      'has-feedback': validationState === 'success',
    }, this.props.className);

    const error = this.state.error;
    let errorMessage = null;
    if (Array.isArray(error) && error.length > 0) {
      errorMessage = <span className="help-block">{error.map((e, i) => <span key={i}>{e}</span>)}</span>;
    } else if (isString(error)) {
      errorMessage = <span className="help-block">{error}</span>;
    }

    let successMessage = null;

    if (validationState === 'success') {
      successMessage = <span className="glyphicon glyphicon-ok form-control-feedback" aria-hidden="true" />;
    }

    return (
      <div className={className} style={this.props.style} ref={node => (this.node = node)}>
        {this.props.children}
        {errorMessage}
        {successMessage}
      </div>
    );
  }
}

FormGroupValidate.propTypes = {
  tabindex: PropTypes.number,
  index: PropTypes.number,
  className: PropTypes.string,
  style: PropTypes.object,
};
FormGroupValidate.defaultProps = {
  tabindex: -1,
  style: {},
};
