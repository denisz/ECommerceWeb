import { noop, defaults } from 'underscore';

const defaultDelegate = {
  dialogsDidChange: noop,
  dialogsWillChange: noop,
};

const kFormDialogShowKey = Symbol('show');
const kFormDialogParamsKey = Symbol('params');

export default class DialogController {
  constructor(delegate = defaultDelegate) {
    this.delegate = defaults(delegate, defaultDelegate);
    this.state = {
      dialogs: {},
    };
  }

  setState(attrs) {
    this.delegate.dialogsWillChange(this);
    this.state = Object.assign({}, this.state, attrs);
    this.delegate.dialogsDidChange(this);
  }

  wrapperShowDialog(...args) {
    return () => {
      this.showDialog(...args);
    };
  }

  wrapperHideDialog(...args) {
    return () => {
      this.hideDialog(...args);
    };
  }

  wrapperToggleDialog(dialogName, params) {
    return () => {
      if (this.isVisibleDialog(dialogName)) {
        this.hideDialog(dialogName);
      } else {
        this.showDialog(dialogName, params);
      }
    };
  }

  showDialog = (dialogName, params = {}) => {
    const dialogs = this.state.dialogs;
    dialogs[dialogName] = {
      [kFormDialogShowKey]: true,
      [kFormDialogParamsKey]: params,
    };
    this.setState({ dialogs });
  };

  hideDialog = (dialogName) => {
    const dialogs = this.state.dialogs;
    dialogs[dialogName] = {
      [kFormDialogShowKey]: false,
      [kFormDialogParamsKey]: {},
    };
    this.setState({ dialogs });
  };

  isVisibleDialog = (dialogName) => {
    const dialogs = this.state.dialogs;
    return dialogs[dialogName] && dialogs[dialogName][kFormDialogShowKey] === true;
  };

  dismissAllDialogs = () => {
    const dialogs = {};
    this.setState({ dialogs });
  };

  getParamsDialog(dialogName, key) {
    const params = this.paramsDialog(dialogName);
    return params[key];
  }

  paramsDialog(dialogName) {
    const dialogs = this.state.dialogs;
    const dialog = dialogs[dialogName];
    if (dialog) {
      return Object.freeze(dialog[kFormDialogParamsKey] || {});
    }

    return {};
  }
}
