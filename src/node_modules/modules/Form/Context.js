import { contains, clone, values, isNull, difference, isString, isEqual, intersection } from 'underscore';
import assert from 'assert';

export default class Context {
  constructor() {
    this.path = [];
    this.object = null;
    this.action = null;
    this.oldObject = null;
  }

  isSet() {
    return this.action === Context.Actions.Set;
  }

  isDel() {
    return this.action === Context.Actions.Delete;
  }

  isExtend() {
    return this.action === Context.Actions.Extend;
  }

  isTransaction() {
    return this.action === Context.Actions.Transaction;
  }

  isUnset() {
    return this.action === Context.Actions.Unset;
  }

  setAction(action) {
    const valid = values(Context.Actions);
    assert(contains(valid, action), 'Action is invalid');
    this.action = action;
  }

  getObject() {
    return this.object;
  }

  setObject(object) {
    this.object = object;
  }

  setOldObject(oldObject) {
    this.oldObject = clone(oldObject);
  }

  getOldObject() {
    return this.oldObject;
  }

  diff() {
    const newValue = this.getObject();
    const oldValue = this.getOldObject();

    if (isNull(oldValue)) {
      return null;
    }

    if (Array.isArray(newValue) && Array.isArray(oldValue)) {
      return difference(newValue, oldValue);
    }

    return null;
  }

  setPath(path) {
    if (Array.isArray(path)) {
      this.path = path;
    } else if (isString(path)) {
      this.path = path.split('.');
    }
  }

  comparePath(p, inter) {
    let path = p;

    if (isString(path)) {
      path = path.split('.');
    }

    assert(Array.isArray(path), 'Path is not recognized as a array');
    assert(Array.isArray(this.path), "The property `path` is not recognized as a array, maybe, that a method 'setPath' was not called");

    return inter ? intersection(this.path, path).length > 0 : isEqual(this.path, path);
  }
}

Context.Actions = {
  Set: 'set',
  Delete: 'delete',
  Extend: 'extend',
  Unset: 'unset',
  Clear: 'clear',
  Transaction: 'transaction',
};
