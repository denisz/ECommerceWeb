import React, {Component} from 'react';
import PropTypes from 'prop-types';
import {defaults, isObject, noop} from 'underscore';
import BootstrapTable from 'react-bootstrap-table-next';
import overlayFactory from 'react-bootstrap-table2-overlay';
import PaginationView from './PaginationView';
import QueryController from './QueryController';

export default class QueryTableView extends Component {
  get data() {
    const {query} = this.props;
    return [...query];
  }

  get headers() {
    const {headers, headerStyle} = this.props;
    return headers.map(i => ({
      headerStyle: {
          ...headerStyle,
        width: `${i.width}px`,
      },
      text: i.title,
      sort: i.dataSort,
      dataField: i.dataField,
      formatter: this.formatter,
      formatExtraData: i.dataField,
    }));
  }

  get selectRow() {
    if (this.props.allowSelect) {
      return defaults(this.props.optionsSelect, {
        mode: this.props.selectMode,
        onSelectAll: this.props.onSelectAll,
        onSelect: this.props.onSelect,
        clickToSelect: true,
        clickToEdit: true,
        bgColor: '#D4E8F7',
        hideSelectColumn: this.props.hideSelectColumn,
      });
    }
    return {
      hideSelectColumn: true,
      mode: this.props.selectMode,
    };
  }

  get rowEvents() {
    return {
      onClick: this.props.onRowClick,
    };
  }

  formatter = (cell, row, rowIndex, extra) => {
    const content = this.props.renderCell(extra, row, rowIndex);
    if (isObject(content)) {
      return content;
    }

    return <div className="text-wrap">{content}</div>;
  };

  /**
   * filter
   pagination
   sort
   cellEdit
   * @param type
   * @param sortField
   * @param sortOrder
   * @param page
   */
  handleTableChange = (type, {sortField, sortOrder, page}) => {
    switch (type) {
      case 'sort':
        this.props.onSortChange(sortField, sortOrder);
        break;
      case 'pagination':
        this.props.onPageChange(page);
        break;
      case 'filter':
        break;
      case 'cellEdit':
        break;
      default:
        break;
    }
  };

  render() {
    const { query, showLoadingView } = this.props;

    return (
        <div style={this.props.styles}>
          <BootstrapTable
              remote
              ref={(ref) => {
                this.table = ref;
              }}
              noDataIndication={this.props.emptyView}
              hover={this.props.hover}
              striped={this.props.striped}
              bordered={this.props.bordered}
              rowStyle={this.props.rowStyle}
              loading={query.isLoading() && showLoadingView}
              overlay={overlayFactory(
                  {spinner: true, background: 'rgba(192,192,192,0.3)'})}
              keyField={this.props.keyField}
              data={this.data}
              columns={this.headers}
              rowEvents={this.rowEvents}
              selectRow={this.selectRow}
              onTableChange={this.handleTableChange}
          />
          <div style={{display: 'flex', flexDirection: 'row-reverse'}}>
            <PaginationView query={query} style={{margin: 0}}
                            onPageChange={this.props.onPageChange}/>
          </div>
        </div>);
  }
}

QueryTableView.propTypes = {
  renderCell: PropTypes.func.isRequired,
  query: PropTypes.instanceOf(QueryController).isRequired,
  headers: PropTypes.arrayOf(PropTypes.shape({
    dataField: PropTypes.string.isRequired,
    title: PropTypes.string.isRequired,
    dataSort: PropTypes.bool,
    width: PropTypes.number,
    className: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
    columnClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
  })),
  optionsSelect: PropTypes.object,
  keyField: PropTypes.string,
  emptyView: PropTypes.func,
  onPageChange: PropTypes.func,
  onSortChange: PropTypes.func,
  onSearchChange: PropTypes.func,
  onFilterChange: PropTypes.func,
  onRowClick: PropTypes.func,
  onSort: PropTypes.func,
  onSelect: PropTypes.func,
  onSelectAll: PropTypes.func,
  allowSelect: PropTypes.bool,
  selectMode: PropTypes.string,
  styles: PropTypes.object,
  headerStyle: PropTypes.object,
  rowStyle: PropTypes.object,
  showLoadingView: PropTypes.bool,
  hideSelectColumn: PropTypes.bool,
  striped: PropTypes.bool,
  bordered: PropTypes.bool,
  hover: PropTypes.bool,
};
QueryTableView.defaultProps = {
  onFilterChange: noop,
  onSortChange: noop,
  onSearchChange: noop,
  onPageChange: noop,
  onSort: noop,
  onSelect: noop,
  onSelectAll: noop,
  onRowClick: noop,
  emptyView: () => 'Table is Empty',
  selectMode: 'radio',
  hover: true,
  striped: false,
  allowSelect: false,
  showLoadingView: false,
  hideSelectColumn: false,
  optionsSelect: {},
  headerStyle: {},
  rowStyle: {},
};
