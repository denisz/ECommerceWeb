import React, {Component} from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import FlipMove from 'react-flip-move';
import Loading from 'components/Loading';
import PaginationView from '../PaginationView/PaginationView';
import QueryController from '../QueryController';
import RowCell from './RowCell';
import HeadCell from './HeadCell';
import ListItem from './ListItem';
import {isObject} from 'underscore';
import './QueryListView.css';


export default class QueryListView extends Component {
  constructor(props) {
    super(props);

    this.state = {
      selected: [],
    };
  }

  get data() {
    const {query} = this.props;
    return [...query];
  }

  formatter = (cell, row, rowIndex, extra) => {
    const content = this.props.renderCell(extra, row, rowIndex);
    if (isObject(content)) {
      return content;
    }

    return <div className="text-wrap">{content}</div>;
  };

  get headers() {
    const {headers, headerStyle} = this.props;
    return headers.map(i => ({
      style: {
        ...headerStyle,
        flexBasis: `${i.width}px`,
        // width: `${i.width}px`,
      },
      className: 'QueryListView__head_cell',
      text: i.title,
      sort: i.dataSort,
      dataField: i.dataField,
      formatter: this.formatter,
      formatExtraData: i.dataField,
    }));
  }

  handleRowSelect = (row, rowIndex) => () => {
    const {onSelect, onRowClick, allowSelect} = this.props;
    if (allowSelect) {
      const selected = this.state.selected.slice();
      selected.push(row);
      onSelect(row, rowIndex);
      this.setState({ selected });
    }

    onRowClick(row, rowIndex);
  };

  render() {
    const {query, emptyView, paginationPosition, showLoadingView, className, classNameContainer} = this.props;

    return (
        <div className={cx('QueryListView', className)}>
          <div className={cx('QueryListView__row QueryListView__head')}>
            <ul>
              {this.headers.map((i) => (<HeadCell key={i.dataField} {...i} />))}
            </ul>
          </div>
          <div className={cx('QueryListView__body', classNameContainer)}>
            {query.isLoading() && showLoadingView && <Loading/>}
            <FlipMove
                staggerDurationBy="30"
                duration={300}
                enterAnimation={'accordionVertical'}
                leaveAnimation={'accordionVertical'}
                typeName="ul"
            >
              {this.data.map((row, rowIndex) => (
                  <ListItem index={rowIndex}
                            key={row.id}
                            id={row.id}
                            className={cx('QueryListView__row')}
                            onClick={this.handleRowSelect(row, rowIndex)}
                  >
                    {this.headers.map(
                        (i) => <RowCell key={i.dataField} {...i}>{i.formatter(
                            i, row, rowIndex, i.formatExtraData)}</RowCell>)}
                  </ListItem>))}
            </FlipMove>
            {query.isEmpty() && <div className="QueryListView__empty">{emptyView()}</div>}
          </div>
          <div style={{
            display: 'flex',
            justifyContent: paginationPosition,
          }}>
            <PaginationView query={query} style={{margin: 0}}
                            onPageChange={this.props.onPageChange}/>
          </div>
        </div>
    );
  }
}

QueryListView.propTypes = {
  renderCell: PropTypes.func.isRequired,
  query: PropTypes.instanceOf(QueryController).isRequired,
  headers: PropTypes.arrayOf(PropTypes.shape({
    dataField: PropTypes.string.isRequired,
    title: PropTypes.string.isRequired,
    dataSort: PropTypes.bool,
    width: PropTypes.number,
    className: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
    columnClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
  })),
  className: PropTypes.string,
  emptyView: PropTypes.func,
  onSelect: PropTypes.func,
  allowSelect: PropTypes.bool,
  headerStyle: PropTypes.object,
  onPageChange: PropTypes.func,
};

QueryListView.defaultProps = {
  onSelect: () => {
  },
  allowSelect: false,
  headerStyle: {},
  emptyView: () => 'Table is Empty',
};