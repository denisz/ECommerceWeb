import React, {Component} from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import FlipMove from 'react-flip-move';
import Loading from 'components/Loading';
import PaginationView from '../PaginationView/PaginationView';
import QueryController from '../QueryController';
import BodyCell from './BodyCell';
import HeadCell from './HeadCell';
import ListItem from './ListItem';
import CheckCell from './CheckCell';
import {constant, isObject} from 'underscore';
import './QueryListView.css';

export default class QueryListView extends Component {
  constructor(props) {
    super(props);

    this.state = {
      selected: new Set(props.selected),
      selectAll: false,
    };
  }

  componentWillReceiveProps(nextProps) {
    const { selectAll } = this.state;

    this.setState({
      selected: new Set(nextProps.selected),
      selectAll: nextProps.selected.length > 0 ? selectAll : false,
    });
  }

  get data() {
    const {query} = this.props;
    return [...query];
  }

  formatter = (cell, row, rowIndex, extra) => {
    const content = this.props.renderCell(extra, row, rowIndex);
    if (isObject(content)) {
      return content;
    }

    return <div className="text-wrap">{content}</div>;
  };

  get headers() {
    const {headers, headerStyle} = this.props;
    return headers.map(i => ({
      style: {
        ...headerStyle,
        ...(i.style || {}),
        // flexBasis: `${i.width}px`,
        // width: `${i.width}px`,
      },
      className: 'QueryListView__head_cell',
      text: i.title,
      sort: i.dataSort,
      dataField: i.dataField,
      formatter: this.formatter,
      formatExtraData: i.dataField,
    }));
  }

  handleRowClick = (row, rowIndex) => (e) => {
    e.preventDefault();
    e.stopPropagation();

    const {onRowClick} = this.props;
    onRowClick(row, rowIndex);
  };

  handleRowSelect = (row, rowIndex) => (checked) => {
    const {onSelect, allowSelect} = this.props;
    if (!allowSelect) return;

    const selected = new Set([...this.state.selected]);

    if (checked) {
      selected.add(row.id);
    } else {
      selected.delete(row.id);
    }

    this.setState({selected, selectAll: false});
    onSelect(row, rowIndex, checked, [...selected]);
  };

  handleSelectAll = () => (selectAll) => {
    const {onSelectAll, query} = this.props;
    if (query.isEmpty()) return;

    let selected = new Set([...this.state.selected]);

    if (!selectAll) {
      selected = new Set([]);
    }

    this.setState({selected, selectAll});
    onSelectAll(selectAll ? this.data.map(i => i.id) : [], selectAll);
  };

  checkSelectedRow(id) {
    const {selected, selectAll} = this.state;
    if (selectAll) return true;
    return selected.has(id);
  }

  checkSelectedAll() {
    const {selectAll} = this.state;
    return selectAll;
  }

  render() {
    const {query, styleCell, emptyView, paginationPosition, showLoadingView, className, classNameContainer} = this.props;
    const {allowSelect} = this.props;

    return (
        <div className={cx('QueryListView', className)}>
          <div className={cx('QueryListView__row QueryListView__head')}>
            <ul>
              {allowSelect && (
                  <HeadCell className={cx('QueryListView__head_check_cell')}>
                    <CheckCell checked={this.checkSelectedAll()}
                               onChange={this.handleSelectAll()}/>
                  </HeadCell>
              )}
              {this.headers.map((i) => (
                  <HeadCell key={i.dataField} {...i} >{i.text}</HeadCell>))}
            </ul>
          </div>
          <div className={cx('QueryListView__body', classNameContainer)}>
            {query.isLoading() && showLoadingView && <Loading/>}
            <FlipMove
                staggerDurationBy="30"
                duration={200}
                enterAnimation={'accordionVertical'}
                leaveAnimation={'accordionVertical'}
                typeName="ul"
            >
              {this.data.map((row, rowIndex) => (
                  <ListItem index={rowIndex}
                            key={row.id}
                            id={row.id}
                            className={cx('QueryListView__row')}
                            onClick={this.handleRowClick(row, rowIndex)}
                            style={styleCell(row, rowIndex)}
                  >
                    {allowSelect &&
                    (
                        <BodyCell
                            className={cx('QueryListView__body_check_cell',
                                'QueryListView__check_cell')}>
                          <CheckCell checked={this.checkSelectedRow(row.id)}
                                     onChange={this.handleRowSelect(row,
                                         rowIndex)}/>
                        </BodyCell>
                    )}

                    {this.headers.map(
                        (i) => (
                            <BodyCell key={i.dataField}
                                      style={i.style}>
                              {i.formatter(i, row, rowIndex, i.formatExtraData)}
                            </BodyCell>
                        ))}
                  </ListItem>))}
            </FlipMove>
            {query.isEmpty() &&
            <div className="QueryListView__empty">{emptyView()}</div>}
          </div>
          <div style={{
            display: 'flex',
            margin: '10px 0',
            justifyContent: paginationPosition,
          }}>
            <PaginationView query={query} style={{margin: 0}}
                            onPageChange={this.props.onPageChange}/>
          </div>
        </div>
    );
  }
}

QueryListView.propTypes = {
  renderCell: PropTypes.func.isRequired,
  query: PropTypes.instanceOf(QueryController).isRequired,
  headers: PropTypes.arrayOf(PropTypes.shape({
    dataField: PropTypes.string.isRequired,
    title: PropTypes.string.isRequired,
    dataSort: PropTypes.bool,
    width: PropTypes.number,
    className: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
    columnClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
  })),
  className: PropTypes.string,
  emptyView: PropTypes.func,
  onSelect: PropTypes.func,
  onSelectAll: PropTypes.func,
  selectMode: PropTypes.string,
  allowSelect: PropTypes.bool,
  hideSelectColumn: PropTypes.bool,
  styleCell: PropTypes.func,
  selected: PropTypes.array,
  headerStyle: PropTypes.object,
  paginationPosition: PropTypes.string,
  onPageChange: PropTypes.func,
};

QueryListView.defaultProps = {
  onSelect: () => {
  },
  onSelectAll: () => {
  },
  onRowClick: () => {
  },
  selected: [],
  styleCell: constant({}),
  selectMode: 'checkbox',
  allowSelect: false,
  hideSelectColumn: false,
  headerStyle: {},
  paginationPosition: 'center',
  emptyView: () => 'Table is Empty',
};