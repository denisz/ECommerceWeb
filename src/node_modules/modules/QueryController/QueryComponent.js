import { Component } from 'react';
import { DialogController } from 'modules/Form';
import { QueryController } from 'modules/QueryController';
import {Lock} from 'modules/Lock';

export default class QueryComponent extends Component {
  constructor(props) {
    super(props);

    const { objectsPerPage } = props;

    this.state = {
      ...this.getInitialState(props),
      lock: new Lock(this),
      dialogs: new DialogController(this),
      query: new QueryController(this, {
        ...this.getControllerProps(),
        objectsPerPage
      }),
    };
  }

  getInitialState() {
    return {};
  }

  getControllerProps() {
    return {}
  }

  componentWillMount() {
    const { page = 0 } = this.props;
    this.state.query.loadObjectsWithPage(page, true);
  }

  componentDidMount() {

  }

  componentWillUnmount() {

  }

  async componentWillReceiveProps(newProps) {
    const { page, autoReload } = newProps;
    const { query } = this.state;

    if (query.currentPage() === page && !autoReload) return;

    if (page) {
      query.deferLoadWithPageObjects(page, true);
    } else {
      query.deferLoadObjects();
    }
  }

  queryObjectsWillLoad(query) {
    this.setState({ query });
  }

  queryObjectsDidLoad(query, error) {
    if (error instanceof Error) {
      this.setState({ error });
    } else {
      this.setState({ query });
    }
  }

  queryForRequest() {
    const { query } = this.props;
    return query;
  }

  reloadData() {
    this.state.query.fetchCurrentPage();
  }

  // MARK: Implements Dialog Delegate
  dialogsDidChange(dialogs) {
    this.setState({dialogs});
  }

  // MARK: Implements Lock Delegate
  lockDidChange(lock) {
    this.setState({ lock });
  }
}
