import { noop, isObject, isFunction } from 'underscore';
import Promise from 'yaku';

const defaultDelegate = {
  lockWillChange: noop,
  lockDidChange: noop,
};

const kLock = true;
const kUnlock = false;

export default class Lock {
  constructor(delegate = defaultDelegate) {
    this.delegate = delegate;
    this.state = false;

    this.lock = ::this.lock;
    this.unlock = ::this.unlock;

    this.waiting = [];
  }

  innerSetState(state) {
    if (isObject(this.delegate) && isFunction(this.delegate.lockWillChange)) {
      this.delegate.lockWillChange(this);
    }

    this.state = state;

    if (isObject(this.delegate) && isFunction(this.delegate.lockDidChange)) {
      this.delegate.lockDidChange(this);
    }

    while (this.waiting.length && this.state === kUnlock) {
      const handler = this.waiting.shift();
      handler.defer(handler.result);
    }
  }

  deferLock(callback, context) {
    const self = this;

    return this.tryLock()
      .then(() => {
        if (isFunction(callback)) {
          if (context) {
            return callback.call(context);
          }
          return callback();
        }

        return callback;
      })
      .then((result) => {
        self.unlock();
        return result;
      }, (error) => {
        self.unlock();
        throw error;
      });
  }

  when(result) {
    const waiting = this.waiting;

    if (this.state === kLock) {
      return new Promise((resolve) => {
        waiting.push({
          defer: resolve,
          result,
        });
      });
    }

    return new Promise((resolve) => { resolve(result); });
  }

  tryLock(result) {
    const self = this;
    return this.when(result)
      .then((res) => {
        self.lock();
        return res;
      });
  }

  is() {
    return this.state;
  }

  isFree() {
    return this.state === kUnlock;
  }

  lock() {
    this.innerSetState(kLock);
  }

  unlock() {
    this.innerSetState(kUnlock);
  }

}
