import { noop, isFunction, defaults } from 'underscore';
import { Lock } from 'modules/Lock';
import Controller from './Controller';

const defaultDelegate = {
  navAdapterFailed: noop,
  navAdapterDidNext: noop,
  navAdapterDidBack: noop,
  navAdapterDidUpdate: noop,
  navAdapterWillUpdate: noop,
  navAdapterDidRichEnd: noop,
  navAdapterDidRichStart: noop,
};

export default class NavAdapter {
  constructor(delegate = defaultDelegate, ...rest) {
    this.delegate = defaults(delegate, defaultDelegate);

    const controller = new Controller(this, ...rest);

    this.state = Object.assign({
      nav: controller,
      lock: new Lock(this),
      form: null,
      formRef: null,
      error: false,
    });

    this.navControllerDidReady(controller);
  }

  get transitions() {
    const { nav } = this.state;
    return nav.transitions();
  }

  get nextBtn() {
    const { nav } = this.state;
    const { nextBtn } = nav.prefs;
    return nextBtn;
  }

  get prevBtn() {
    const { nav } = this.state;
    const { prevBtn } = nav.prefs;
    return prevBtn;
  }

  get controller() {
    return this.state.nav;
  }

  get form() {
    return this.state.form;
  }

  get error() {
    return this.state.error;
  }

  get isLock() {
    const { lock } = this.state;
    return lock.is();
  }

  get canForward() {
    const { nav } = this.state;
    return nav.canForward && !this.isLock;
  }

  get canBack() {
    const { nav } = this.state;
    return nav.canBack && !this.isLock;
  }

  get transitionKey() {
    const { nav } = this.state;
    return nav.prefs.key;
  }

  onRef = (formRef) => {
    this.formRef = formRef;
  };

  setState(attrs) {
    this.delegate.navAdapterWillUpdate(this);
    this.state = Object.assign({}, this.state, attrs);
    this.delegate.navAdapterDidUpdate(this);
  }

  handleBack = async () => {
    const { nav, lock } = this.state;
    const { prev } = nav.prefs;

    await lock.tryLock();

    try {
      this.setState({ error: null });

      if (prev) {
        await prev();
      }

      this.delegate.navAdapterDidBack(this);

      await nav.back();
    } catch (e) {
      this.navHandleError(e);
    }

    lock.unlock();
  };

  handleNext = async () => {
    const { nav, lock } = this.state;
    const formRef = this.formRef;
    const { next } = nav.prefs;
    let attrs = {};

    if (formRef && isFunction(formRef.onSubmit)) {
      attrs = await formRef.onSubmit();
    }

    await lock.tryLock();

    try {
      this.setState({ error: null });

      if (next) {
        await next(attrs);
      }

      this.delegate.navAdapterDidNext(this, attrs);

      await nav.next();
    } catch (e) {
      this.navHandleError(e);

      if (formRef && isFunction(formRef.performError)) {
        formRef.performError(e);
      }
    }

    lock.unlock();
  };

  navHandleError(error ) {
    this.setState({ error });
    this.delegate.navAdapterFailed(this, error);
  }

  lockDidChange(lock) {
    this.setState({ lock });
  }

  async navControllerDidReady(nav) {
    const prefs = nav.prefs;
    const form = await prefs.form();

    this.setState({ nav, form });
  }

  async navControllerDidChange(nav) {
    const prefs = nav.prefs;
    const form = await prefs.form();

    this.setState({ nav, form });
  }

  navControllerDidRichEnd() {
    this.delegate.navAdapterDidRichEnd(this);
  }

  navControllerDidRichStart() {
    this.delegate.navAdapterDidRichStart(this);
  }
}
