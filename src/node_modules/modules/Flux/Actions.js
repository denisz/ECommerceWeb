import EventEmitter from './EventEmitter';

export default class Actions extends EventEmitter {
  constructor() {
    super();
    this.actions = new Map();
  }

  async perform(actionName, ...args) {
    const options = this.actions.get(actionName);

    if (typeof options.willEmit === 'function') {
      await options.willEmit(...args);
    }

    await this.emitAsync('invoke', actionName, ...args);

    if (typeof options.didEmit === 'function') {
      await options.didEmit();
    }
  }

  register(actionName, options = {}) {
    if (this.actions.has(actionName)) {
      throw new Error(`Duplicate action with name ${actionName}`);
    }

    this.actions.set(actionName, options);
    this[actionName] = Actions.createFunction(this, actionName, options);
  }

  static createFunction = (controller, actionName) => async (...args) => await controller.perform(actionName, ...args); //eslint-disable-line

  static create = (cases) => {
    const actions = new Actions();

    [...cases.entries()].forEach(([action, options]) => {
      actions.register(action, options);
    });

    return actions;
  };

  [Symbol.iterator]() {
    return this.actions.keys();
  }
}
