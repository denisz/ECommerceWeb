const isFunction = obj => typeof obj === 'function' || false;

export default class EventEmitter {
  constructor() {
    this.listeners = new Map();
  }

  addListener(label, callback) {
        this.listeners.has(label) || this.listeners.set(label, []);//eslint-disable-line
    this.listeners.get(label).push(callback);
  }

  removeAllListener(label) {
    this.listeners.set(label, []);
  }

  removeListener(label, callback) {
    const listeners = this.listeners.get(label);
    let index;

    if (listeners && listeners.length) {
            index = listeners.reduce((i, listener, idx) => (isFunction(listener) && listener === callback) ? i = idx : i, -1); //eslint-disable-line

      if (index > -1) {
        listeners.splice(index, 1);
        this.listeners.set(label, listeners);
        return true;
      }
    }
    return false;
  }

  async emitAsync(label, ...args) {
    const listeners = this.listeners.get(label);

    if (listeners && listeners.length) {
      for (const listener of listeners) { //eslint-disable-line
        await listener(...args); //eslint-disable-line
      }
      return true;
    }
    return false;
  }

  emit(label, ...args) {
    const listeners = this.listeners.get(label);

    if (listeners && listeners.length) {
      for (const listener of listeners) {//eslint-disable-line
        listener(...args);
      }
      return true;
    }
    return false;
  }
}
