/* eslint-disable react/no-direct-mutation-state */
import { DialogComponent as Component } from 'modules/Form';

function pick(o, ...props) {
  return Object.assign({}, ...props.map(prop => ({ [prop]: o[prop] })));
}

const kStopListenStores = Symbol('stopListenStores');
const kStoresKey = Symbol('stores');

export default class FormComponent extends Component {
  constructor(props) {
    super(props);

    this[kStoresKey] = this.getInitialStore();
    this[kStopListenStores] = [];
  }

  componentWillMount() {
    super.componentWillMount();
    const states = [...[].concat(this[kStoresKey])].map(s => this.retrieveStoreData(s, s.toJSON()));
    this.setState(Object.assign({}, this.state, ...states));
  }

  componentDidMount() {
    super.componentDidMount();

    this[kStopListenStores] = [...[].concat(this[kStoresKey])]
      .map(storage => storage.listen(async (store, attrs) => {
        await this.willChangeStoreState(store, attrs);
        const states = this.retrieveStoreData(store, attrs);
        this.setState(states);
        await this.didChangeStoreState(store, attrs);
      }));
  }

  componentWillUnmount() {
    super.componentWillUnmount();

    for (const stop of this[kStopListenStores]) { //eslint-disable-line
      stop();
    }
  }

  getInitialStore() {
    return [];
  }

  getStoreKeys() {
    return null;
  }

  retrieveStoreData(store, attrs) {
    const keys = this.getStoreKeys();
    if (Array.isArray(keys)) {
      return pick(attrs, ...keys);
    }
    return attrs;
  }

  willChangeStoreState(store, attrs) {} //eslint-disable-line
  didChangeStoreState(store, attrs) {} //eslint-disable-line
}
