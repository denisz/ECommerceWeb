export default class AbstractQuery {
  // Finds objects
  // query.find()
  async find() {
    throw new Error('Find method is not implementation.');
  }

  // To retrieve first document
  // query.first()
  async first() {
    const response = await this.find();
    return response[0];
  }

  // To retrieve count documents
  // query.count()
  async count() {
    throw new Error('Count method is not implementation.');
  }

  // limit to at most 10 results
  // query.limit(10);
  limit(limit) {} //eslint-disable-line

  // skip the first 10 results
  // query.skip(10);
  skip(offset) {}  //eslint-disable-line

  // query.page(1);
  page(number) {} //eslint-disable-line

  // Restricts to wins > 50
  // query.greaterThan("wins", 50);
  greaterThan(key, val) {}  //eslint-disable-line

  // query.notEqualTo("playerName", "Michael Yabuti");
  notEqualTo(key, val) {}  //eslint-disable-line

  // Restricts to wins < 50
  // query.lessThan("wins", 50);
  lessThan(key, val) {}  //eslint-disable-line

  // Restricts to wins <= 50
  // query.lessThanOrEqualTo("wins", 50);
  lessThanOrEqualTo(key, val) {}  //eslint-disable-line

  // Restricts to wins >= 50
  // query.greaterThanOrEqualTo("wins", 50);
  greaterThanOrEqualTo(key, val) {}  //eslint-disable-line

  // Finds scores from any of Jonathan, Dario, or Shawn
  // query.containedIn("playerName", ["Jonathan Walsh", "Dario Wunsch", "Shawn Simon"]);
  containedIn(key, invariants) {}  //eslint-disable-line

  // Finds scores from anyone who is neither Jonathan, Dario, nor Shawn
  // query.notContainedIn("playerName", ["Jonathan Walsh", "Dario Wunsch", "Shawn Simon"]);
  notContainedIn(key, invariants) {}  //eslint-disable-line

  // Find objects where the array in arrayKey contains all of the elements 2, 3, and 4.
  // query.containsAll("arrayKey", [2, 3, 4]);
  containsAll(key, invariants) {}  //eslint-disable-line

  // To retrieve documents that contain only the score and playerName fields
  // query.select("score", "playerName");
  select(...keys) {}  //eslint-disable-line

  // Find objects where the array in arrayKey contains 2.
  // query.equalTo("arrayKey", 2);
  equalTo(key, val) {}  //eslint-disable-line

  // Sorts the results in ascending order by the score field
  // query.ascending("score");
  ascending(key) {}  //eslint-disable-line

  // Sorts the results in descending order by the score field
  // query.descending("score");
  descending(key) {}  //eslint-disable-line

  sort(key, dir) {
    if (dir === 'asc') {
      this.ascending(key);
    } else if (dir === 'desc') {
      this.descending(key);
    }
  }

  // Finds barbecue sauces that start with "Big Daddy's".
  // query.startsWith("name", "Big Daddy's");
  startsWith(key, val) {}  //eslint-disable-line
}
