import React from 'react';
import ComboBox from 'components/ComboBox';
import TextField from 'components/TextField';
import Textarea from 'components/Textarea';
import OrderView from 'components/OrderView';
import Toggle from 'components/Toggle';
import DoubleButton, {SingleButton} from 'components/DialogToolbar';
import Actions from 'flux/AdminActions';
import {pick} from 'underscore';
import {
  DialogComponent,
  ErrorView,
  Form,
  FormGroupValidate,
} from 'modules/Form';
import './OrderEdit.css';
import MForm from './MForm';
import * as keys from './constants';
import { kOrderStatusAwaitingShipment } from 'services/localizedOrderStatus';

export default class OrderEdit extends DialogComponent {
  getDefaultModel() {
    return new MForm(this);
  }

  getDataForModel(props) {
    return pick(props.value
        , keys.KIdKey
        , keys.kStatusKey
        , keys.kReceiptNumberKey
        , keys.kTrackingNumberKey
        , keys.kCommentKey);
  }

  printForm = async () => {
    try {
      const {form} = this.state;
      const id = form.getObject(keys.KIdKey);
      await Actions.printForm(id)
    } catch(error) {
      this.setState({ error })
    }
  };

  canPrintForm () {
    const { form } = this.state;

    return form.isEqual(keys.kStatusKey, kOrderStatusAwaitingShipment)
        && form.isNotEmpty(keys.kTrackingNumberKey)
  }

  render() {
    const {form, error} = this.state;
    const {value, disabled} = this.props;

    return (
        <div className="OrderEdit">
          <ErrorView error={error}/>
          <OrderView {...value}/>
          <Form method="post">
            <FormGroupValidate tabindex={1}
                               className="form-group"
                               ref={keys.kStatusKey}>
              <ComboBox name={keys.kStatusKey}
                        placeholder="Статус"
                        choices={keys.statuses}
                        disabled={disabled}
                        value={form.getObject(keys.kStatusKey)}
                        onChange={form.wrapperChange(keys.kStatusKey)}/>
            </FormGroupValidate>

            <FormGroupValidate tabindex={1}
                               className="form-group"
                               ref={keys.kNoticeRecipientKey}>
              <Toggle checked={form.getObject(keys.kNoticeRecipientKey)}
                      disabled={disabled}
                      onChange={form.wrapperChange(keys.kNoticeRecipientKey)}
                      label="Оповещение пользователя"/>
            </FormGroupValidate>

            <FormGroupValidate tabindex={2}
                               className="form-group"
                               ref={keys.kReceiptNumberKey}>
              <TextField name={keys.kReceiptNumberKey}
                         placeholder="Квитанция"
                         disabled={disabled}
                         value={form.getObject(keys.kReceiptNumberKey, '')}
                         onChange={form.wrapperChange(keys.kReceiptNumberKey)}
              />
            </FormGroupValidate>

            <FormGroupValidate tabindex={3}
                               className="form-group"
                               ref={keys.kTrackingNumberKey}>
              <TextField name={keys.kTrackingNumberKey}
                         placeholder="Номер отслеживания"
                         value={form.getObject(keys.kTrackingNumberKey, '')}
                         disabled={disabled}
                         onChange={form.wrapperChange(keys.kTrackingNumberKey)}
              />
            </FormGroupValidate>

            <FormGroupValidate tabindex={4}
                               className="form-group"
                               ref={keys.kCommentKey}>
              <Textarea name={keys.kCommentKey}
                        placeholder="Комментарий"
                        value={form.getObject(keys.kCommentKey, '')}
                        disabled={disabled}
                        onChange={form.wrapperChange(keys.kCommentKey)}
              />
            </FormGroupValidate>

            {this.canPrintForm() &&
            (<div className="text-center">
              <a className="OrderEdit__print-form" onClick={this.printForm}>Распечатать бланки</a>
            </div>)}

          </Form>
          {disabled && <SingleButton onCancel={this.onCancel}/>}
          {!disabled &&
          <DoubleButton onSubmit={this.onSubmit} onCancel={this.onCancel}/>}
        </div>
    );
  }
}