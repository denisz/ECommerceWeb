import URLRequest from 'modules/Request/URLRequest';

const property = (obj, key) => {
  if (typeof obj === 'object') {
    return obj[key];
  }
  return null;
};

export const Methods = {
  POST: Symbol('post'),
  PUT: Symbol('put'),
  PATCH: Symbol('patch'),
  DELETE: Symbol('delete'),
  GET: Symbol('get'),
};

const methodMap = {
  [Methods.POST]: 'POST',
  [Methods.PUT]: 'PUT',
  [Methods.PATCH]: 'PATCH',
  [Methods.DELETE]: 'DELETE',
  [Methods.GET]: 'GET',
};

const XHR = async (method, options = {}) => {
  const type = methodMap[method];
  const path = property(options, 'path');
  const url = property(options, 'url');
  const body = property(options, 'body');
  const params = property(options, 'urlParams');
  const encode = property(options, 'encode') || 'json';
  const auth = property(options, 'auth');
  const request = URLRequest.NEW();

  request.setMethod(type);

  if (url) {
    request.setURL(url);
  }

  request.setPath(path);
  request.setEncode(encode);
  request.setBody(body);
  request.setAuth(auth);
  request.appendUrlParams(params);
  request.appendUrlParams({ _r: Date.now() });

  const response = await request.fetch();

  if (method === Methods.DELETE) {
    const responseData = {};
    return { responseData, response, options };
  }

  const responseData = await response.json();
  return { responseData, response, options };
};


export default XHR;
