import { Store } from 'modules/Flux';
import Actions from './AdminActions';
import XHR, { Methods } from './XHR';
import { downloadBlob } from 'download.js';

export class Admin extends Store {
  constructor() {
    super();

    this.id = 'admin';
    this.listenables = Actions;
  }

  /**
   * Обновление заказа
   * @param order
   * @param body
   * @returns {Promise<void>}
   */
  async onUpdateOrder(order, body) {
    const { responseData } = await XHR(Methods.POST, {
      path: `/order/${order.id}`, body
    });
    this.setState({ updatedOrder: responseData });
    return responseData;
  }

  /**
   * Обновление каталога
   * @returns {Promise<void>}
   */
  async onUpdateCatalog() {
    const { responseData } = await XHR(Methods.GET, {
      path: '/load/catalog',
    });
    console.log(responseData);
  }

  /**
   * Обновление баннеров
   * @returns {Promise<void>}
   */
  async onUpdateAds() {
    const { responseData } = await XHR(Methods.GET, {
      path: '/load/ads',
    });
    console.log(responseData);
  }

  /**
   * Удалить просроченные заказы
   * @returns {Promise<void>}
   */
  async onClearExpiredOrders() {
    const { responseData } = await XHR(Methods.POST, {
      path: '/orders/clear',
    });
    console.log(responseData);
  }

  /**
   * Создание партии
   * @param ids
   * @returns {Promise<void>}
   */
  async onCreateBatch(ids) {
    const { responseData } = await XHR(Methods.POST, {
      path: '/orders/batch',
      body: { ids },
    });
    console.log(responseData);
    this.setState({ updatedBatch: responseData });
    return responseData;
  }

  /**
   * Бланк заказа
   * @param id
   * @returns {Promise<void>}
   */
  async onPrintForm(id) {
    const { responseData } = await XHR(Methods.POST, {
      path: `/forms/order/${id}`,
      contentType: 'blob',
    });
    downloadBlob(`form_order_${id}.pdf`, responseData);
  }

  /**
   * Бланк партии
   * @param id
   * @returns {Promise<void>}
   */
  async onPrintForms(id) {
    const { responseData } = await XHR(Methods.POST, {
      path: `/forms/batch/${id}`,
      contentType: 'blob',
    });
    downloadBlob(`form_batch_${id}.pdf`, responseData);
  }

  /**
   * Возврат заказов в "Новые"
   * @param id
   * @returns {Promise<void>}
   */
  async onDeleteBatch(id) {
    const { responseData } = await XHR(Methods.DELETE, {
      path: `/batch/${id}`,
    });
    this.setState({ updatedBatch: {} });
    return responseData;
  }

  /**
   * Отправляем данные в ОПС
   * @param id
   * @returns {Promise<void>}
   */
  async onCheckInBatch(id) {
    const { responseData } = await XHR(Methods.GET, {
      path: `/batches/${id}/checkin`,
    });
    this.setState({ updatedBatch: responseData });
    return responseData;
  }

  async onCheckInBatchCurrent() {
    const { id } = this.get('updatedBatch', {});
    if (!id) return;
    await this.onCheckInBatch(id)
  }

  async onPrintFormsCurrent() {
    const { id } = this.get('updatedBatch', {});
    if (!id) return;
    await this.onPrintForms(id)
  }
}

export default new Admin();
