import { Store } from 'modules/Flux';
import Actions from './CartActions';
import XHR, { Methods } from './XHR';

export class Product extends Store {
  constructor() {
    super();
    this.id = 'cart';
    this.listenables = Actions;
  }

  /**
   * Загрузка корзины из сервера
   * @returns {Promise.<void>}
   */
  async onFetch() {
    const { responseData: { positions } } = await XHR(Methods.POST, { path: 'cart' });
    this.setState(this.state, { positions });
  }

  /**
   * Загрузка детальной информации о корзины
   * @returns {Promise.<void>}
   */
  async onDetail() {
    const { responseData } = await XHR(Methods.POST, { path: 'cart/detail' });
    this.setState(responseData);
  }

  /**
   * Обновить корзину
   * @param body
   * @returns {Promise.<void>}
   */
  async onUpdate(body) {
    const { responseData: { positions } } = await XHR(Methods.POST, {
      path: `cart/update`,
      body: { ...body,  operation: 'update'}
    });
    this.setState(this.state, { positions });
  }

  /**
   * Добавить позицию
   * @param product
   * @param amount
   * @returns {Promise.<void>}
   */
  async onInsert(product, amount) {
    const { responseData: { positions } } = await XHR(Methods.POST, {
      path: `cart/update`,
      body: {
        amount,
        productSKU: product.SKU,
        operation: 'insert'}
    });
    this.setState(this.state, { positions });
  }

  /**
   * Удалить позицию
   * @param productSKU
   * @returns {Promise.<void>}
   */
  async onDelete(productSKU) {
    const { responseData: { positions } } = await XHR(Methods.POST, {
      path: `cart/update`,
      body: { productSKU, operation: 'delete' } });
    this.setState(this.state, { positions });
  }
}

export default new Product();
