import { Store } from 'modules/Flux';
import Actions from './CartActions';
import XHR, { Methods } from './XHR';

export class Cart extends Store {
  constructor() {
    super();
    this.id = 'cart';
    this.listenables = Actions;
  }


  isEmpty() {
    return this.positions.length === 0;
  }

  get invoice() {
    return this.get('invoice');
  }

  get address() {
    return this.get('address')
  }

  get delivery() {
    return this.get('delivery')
  }

  get positions() {
    return this.get('positions', [])
  }

  get providers() {
    return this.get('deliveryProviders', [])
  }

  get methods() {
    return this.get('deliveryMethods', [])
  }

  /**
   * Загрузка корзины из сервера
   * @returns {Promise.<void>}
   */
  async onFetch() {
    const { responseData } = await XHR(Methods.POST, { path: 'cart' });
    this.setState(this.state, responseData);
  }

  /**
   * Загрузка детальной информации о корзины
   * @returns {Promise.<void>}
   */
  async onDetail() {
    const { responseData } = await XHR(Methods.POST, { path: 'cart/detail' });
    this.setState(responseData);
  }

  /**
   * Обновить корзину
   * @param product
   * @param amount
   * @returns {Promise.<void>}
   */
  async onUpdate(product, amount) {
    const { responseData } = await XHR(Methods.POST, {
      path: `cart/update`,
      body: {
        amount,
        productSKU: product.SKU,
        operation: 'update'}
    });
    this.setState(this.state, responseData);
  }

  /**
   * Добавить позицию
   * @param product
   * @param amount
   * @returns {Promise.<void>}
   */
  async onInsert(product, amount) {
    const { responseData } = await XHR(Methods.POST, {
      path: `cart/update`,
      body: {
        amount,
        productSKU: product.SKU,
        operation: 'insert'}
    });
    this.setState(this.state, responseData);
  }

  /**
   * Удалить позицию
   * @param product
   * @returns {Promise.<void>}
   */
  async onDelete(product) {
    const { responseData } = await XHR(Methods.POST, {
      path: `cart/update`,
      body: { productSKU: product.SKU, operation: 'delete' } });
    this.setState(this.state, responseData);
  }


  /**
   * Сохраняем адрес
   * @param address
   * @returns {Promise.<void>}
   */
  async onAddress(address) {
    const { responseData } = await XHR(Methods.POST, {
      path: `cart/address`,
      body: address,
    });
    this.setState(this.state, responseData);
  }

  /**
   * Сохраняем способ доставки
   * @param delivery
   * @returns {Promise.<void>}
   */
  async onDelivery(delivery) {
    const { responseData } = await XHR(Methods.POST, {
      path: `cart/delivery`,
      body: delivery,
    });
    this.setState(this.state, responseData);
  }

  /**
   * Создание заказа
   * @returns {Promise.<void>}
   */
  async onCheckout() {
    const { responseData } = await XHR(Methods.POST, { path: 'cart/checkout' });
    this.setState(this.state, responseData);
  }
}

export default new Cart();
