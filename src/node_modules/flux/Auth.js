import { Store } from 'modules/Flux';
import URLRequest, { AuthMethods } from 'modules/Request/URLRequest';
import Error from 'modules/Request/ClientError';
import Actions from './AuthActions';
import XHR, { Methods } from './XHR';

const kStorageTokenKey = 'token';
const kStorageUserIdKey = 'user-id';

export class Auth extends Store {
  constructor() {
    super();

    this.id = 'auth';
    this.listenables = Actions;
  }

  isAuthenticated() {
    return !!this.get('token');
  }

  async onLogin({ username, password }) {
    const { responseData } = await XHR(Methods.POST, {
      path: '/account/login',
      body: { username, password }
    });

    const token = responseData.token;
    localStorage.setItem(kStorageTokenKey, token);
    URLRequest.authMethod = AuthMethods.JWT;
    URLRequest.authentications.set(AuthMethods.JWT, { token });

    this.setState({ token });
  }

  async onLogout() {
    localStorage.removeItem(kStorageTokenKey);
    localStorage.removeItem(kStorageUserIdKey);
    // const req = URLRequest.GET('/account/logout');
    // await req.fetch();
    this.setState({});
  }

  async onAuthenticate() {
    const token = localStorage.getItem(kStorageTokenKey);

    if (!token) {
      throw new Error('Authentication failed');
    }

    await XHR(Methods.POST, {
      path: `/account/me`,
      auth: {
        authMethod: AuthMethods.JWT,
        payload: { token },
      },
    });


    URLRequest.authMethod = AuthMethods.JWT;
    URLRequest.authentications.set(AuthMethods.JWT, { token });

    this.setState({ token });
  }
}

export default new Auth();
