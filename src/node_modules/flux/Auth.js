import { Store } from 'modules/Flux';
import URLRequest, { AuthMethods } from 'modules/Request/URLRequest';
import Error from 'modules/Request/ClientError';
import Actions from './AuthActions';
import XHR, { Methods } from './XHR';

const kStorageTokenKey = 'token';
const kStorageUserIdKey = 'user-id';

export class Auth extends Store {
  constructor() {
    super();

    this.id = 'auth';
    this.listenables = Actions;
  }

  isAuthenticated() {
    return !!this.get('id');
  }

  get fullName() {
    return `${this.get('firstName')} ${this.get('lastName')}`;
  }

  async onLogin({ username, password }) {
    const req = URLRequest.POST('/account/login');
    req.setBody({ username, password });
    const response = await req.fetch();
    const responseData = await response.json();

    if (response.headers.has('X-JWT-Token')) {
      const token = response.headers.get('X-JWT-Token');
      localStorage.setItem(kStorageTokenKey, token);
      localStorage.setItem(kStorageUserIdKey, responseData.id);
      URLRequest.authMethod = AuthMethods.JWT;
      URLRequest.authentications.set(AuthMethods.JWT, { token });
    }

    this.setState(responseData);
  }

  async onLogout() {
    const req = URLRequest.GET('/profiles/logout');
    await req.fetch();
    localStorage.removeItem(kStorageTokenKey);
    localStorage.removeItem(kStorageUserIdKey);
    this.setState({});
  }

  async onSave(body) {
    const { id } = this.state;
    const { responseData } = await XHR(Methods.PUT, { path: `profile/${id}`, body });
    this.setState(responseData);
  }

  async onRequestPasswordReset(username) {
    const req = URLRequest.POST('/account/recoverPassword');
    req.setBody({ username });
    await req.fetch();
  }

  async onAuthenticate() {
    const token = localStorage.getItem(kStorageTokenKey);
    const id = localStorage.getItem(kStorageUserIdKey);

    if (!token || !id) {
      throw new Error('Authentication failed');
    }

    const { responseData } = await XHR(Methods.GET, {
      path: `profile/${id}`,
      auth: {
        authMethod: AuthMethods.JWT,
        payload: { token },
      },
    });


    URLRequest.authMethod = AuthMethods.JWT;
    URLRequest.authentications.set(AuthMethods.JWT, { token });

    this.setState(responseData);
  }
}

export default new Auth();
